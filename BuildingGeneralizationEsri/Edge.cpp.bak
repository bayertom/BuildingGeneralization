#include "stdafx.h"
#include "Edge.h"


#define MAX 999999999999999
//extern std::ofstream file4;

Edge::Edge()
{
	this->xt=0;
	this->yt=0;
	this->recursion=0;
	i_point=point.begin();
	i_intersections=intersections.begin();
}


Edge::Edge(const double xt, const double yt)
{
	this->xt=xt;
	this->yt=yt;
	i_point=point.begin();
	i_intersections=intersections.begin();
}


void Edge::createFirstEdge(std::list<Point> &pl, const bool orientation)
{
	//Create first edge from points depending on their orientation
	for ( std::list<Point> ::iterator i_points = pl.begin(); i_points!= pl.end(); i_points++ )
	{
		//Clockwise
		if (orientation)
		{
			point.push_back(*i_points);
		}

		//Clock counter wise
		else
		{
			point.push_front(*i_points);
		}
	}
}


double Edge::ratio(int orientation_edge)
{
	//Calculate ratio (RMS) of points according to the edge
	int i = 0;
	double x = 0, y = 0, ax = 0, ay = 0, vv = 0, k2x = 0, k2y = 0, k3x = 0, k3y = 0, sigma = 0;

	//Compute its orientation
	if (recursion>1)
	{
		orientation_edge = (orientation_edge % 4 - (recursion - 1) % 4);
		if (orientation_edge <= 0) orientation_edge += 4;
	}

	//Recalculate ratio (squares of residuals of points from the actual edge) and center of mass
	//Compute on the fly with one for cycle
	//Can be replaced with the classical approach: mean and standard deviation
	i_point=point.begin();
	while(i_point!=point.end())
	{
		//Get point properties
		Point *p = &*i_point;
		ax = p->getX();
		ay = p->getY();

		//Compute center of mass
		if (i > 0)
		{
			x = (x * i + ax) / (i + 1);
			y = (y * i + ay) / (i + 1);
		}

		else 
		{
			x = ax;
			y = ay;
		}

		//Standard deviation coefficients in x/y direction
		k2x = k2x - 2 * ax;
		k2y = k2y - 2 * ay;
		k3x = k3x + ax * ax;
		k3y = k3y + ay * ay;

		i++;
		i_point++;
	}

	//Set new center of mass [xt, yt]
	this->xt = x;
	this->yt = y;

	//X direction (horizontal): standard deviation
	if (orientation_edge == 1||orientation_edge == 3)
	{
		vv = fabs(i * y * y + y * k2y + k3y);
		sigma = sqrt(vv / (i - 1));
	}

	//Y direction (vertical): standard deviation
	else
	{
		vv = fabs(i * x * x + x * k2x + k3x);
		sigma = sqrt(vv / (i - 1));
	}

	return sigma;
}


bool Edge::intersection(Point *p1, Point *p2, Point *p3, Point *p4, Point &p_int)
{
	//2 lines intersection
	bool intersection_exists = false;
	const double x1=p1->getX();
	const double y1=p1->getY();
	const double x2=p2->getX();
	const double y2=p2->getY();
	const double x3=p3->getX();
	const double y3=p3->getY();
	const double x4=p4->getX();
	const double y4=p4->getY();

	//Matrix of vectors
	const double a11=x2-x1;
	const double a12=x3-x4;
	const double b11=x3-x1;
	const double a21=y2-y1;
	const double a22=y3-y4;
	const double b21=y3-y1;

	//Determinant
	const double det=a11*a22-a21*a12;
	if (det!=0)
	{
		//Inverse matrix
		const double ia22=a22/det;
		const double ia12=-a12/det;
		const double ia21=-a21/det;
		const double ia11=a11/det;

		//Parameters s, t
		const double s=ia22*b11+ia12*b21;
		const double t=ia21*b11+ia11*b21;

		//Compute intersection point and add the differential shift
		const double xp = x1 + s * (x2 - x1) + 0.00001;
		const double yp = y1 + s * (y2 - y1) - 0.00001;

		//Intersection of 2 lines exists
		if ((s>0) && (s<1) && (t>=0) && (t<=1))
		{
			p_int.setX(xp);
			p_int.setY(yp);

			//First point behind the intersection
			p_int.setP(p2); 

			//Set the flag
			intersection_exists = true;
		}
	}	
	return intersection_exists;
}


void Edge::mbr(Point &v1, Point &v2, Point &v3, Point &v4)
{
	//Find MBR in the normal position (x/y aligned with the horizontal/vertical directions)
	double xmin=(*i_point).getX();
	double ymin=(*i_point).getY();
	double xmax=(*i_point).getX();
	double ymax=(*i_point).getY();

	i_point=point.begin();
	while (i_point!=point.end())
	{
		if ((*i_point).getX()<xmin)
		{
			xmin=(*i_point).getX();
		}
		if ((*i_point).getY()<ymin)
		{
			ymin=(*i_point).getY();
		}
		if ((*i_point).getX()>xmax)
		{
			xmax=(*i_point).getX();
		}
		if ((*i_point).getY()>ymax)
		{
			ymax=(*i_point).getY();
		}

		//Incrementation
		i_point++;
	}

	//MBR rotated, assign vertices
	v1.setX(xmin);
	v1.setY(ymax);
	v2.setX(xmax);
	v2.setY(ymax);
	v3.setX(xmax);
	v3.setY(ymin);
	v4.setX(xmin);
	v4.setY(ymin);
}


bool Edge::mbrNearestVertices(Point &v1, Point &v2, Point &v3, Point &v4, int index, int posit, int orientation)
{
	//Find MBR vertices and add new vertex if necessary
	int i1=-3, i2=-2, i3=-1, i4=0,i12=-3,i22=-2,i32=-1,i42=0,i=1;
	double s1, s2, s3, s4;		//Distances point-vertex
	double s1_min, s2_min, s3_min, s4_min, s1_min2,s2_min2, s3_min2, s4_min2;										//Minimal distances point-vertex
	bool result=true;
	Point *v1p=NULL, *v2p=NULL, *v3p=NULL, *v4p=NULL ;							//Result vertices of the edge
	Point *v1p2=NULL,*v2p2=NULL, *v3p2=NULL, *v4p2=NULL;

	//Initialization
	double x1=v1.getX();
	double y1=v1.getY();
	double x2=v2.getX();
	double y2=v2.getY();
	double x3=v3.getX();
	double y3=v3.getY();
	double x4=v4.getX();
	double y4=v4.getY();

	//Minimum distances
	s1_min=MAX;
	s2_min=MAX;
	s3_min=MAX;
	s4_min=MAX;

	//Second minimum distances
	s1_min2=MAX;
	s2_min2=MAX;
	s3_min2=MAX;
	s4_min2=MAX;

	i_point=point.begin();
	while (i_point!=point.end())
	{
		//Get point
		double xi=(*i_point).getX();
		double yi=(*i_point).getY();

		//Calculate distances
		s1=sqrt((xi-x1)*(xi-x1)+(yi-y1)*(yi-y1));
		s2=sqrt((xi-x2)*(xi-x2)+(yi-y2)*(yi-y2));
		s3=sqrt((xi-x3)*(xi-x3)+(yi-y3)*(yi-y3));
		s4=sqrt((xi-x4)*(xi-x4)+(yi-y4)*(yi-y4));

		//Left rectangle
		if (posit==0||index==2)
		{
			//Find closest vertex to first vertex
			if (s1<s1_min)
			{
				s1_min2=s1_min;
				v1p2=v1p;
				i12=i1;
				i1=i;

				//New closest vertex
				v1p=&*i_point;
				s1_min=s1;
			}
			//Find second closest vertex
			else if (s1<s1_min2)
			{
				v1p2=&*i_point;
				s1_min2=s1;
				i12=i;
			}

			//Find closest vertex to second vertex
			if (s2<s2_min)
			{
				//Second closest vertex
				s2_min2=s2_min;
				v2p2=v2p;
				i22=i2;
				i2=i;
				//New closest vertex
				v2p=&*i_point;
				s2_min=s2;
			}
			//Find second closest vertex
			else if (s2<s2_min2)
			{
				v2p2=&*i_point;
				s2_min2=s2;
				i22=i;
			}
		}

		//Right rectangle
		if (posit==1||index==2)
		{
			//Find closest vertex to third vertex
			if (s3<s3_min)
			{				
				//Second closest vertex
				s3_min2=s3_min;
				v3p2=v3p;
				i32=i3;
				i3=i;
				//New closest vertex
				v3p=&*i_point;
				s3_min=s3;
			}
			//Find second closest vertex
			else if (s3<s3_min2)
			{
				v3p2=&*i_point;
				s3_min2=s3;
				i32=i;
			}

			//Find closest vertex to fourth vertex
			if (s4<s4_min)
			{
				//Second closest vertex
				s4_min2=s4_min;
				v4p2=v4p;
				i42=i4;
				i4=i;

				//New closest vertex
				v4p=&*i_point;
				s4_min=s4;
			}
			//Find second closest vertex
			else if (s4<s4_min2)
			{
				v4p2=&*i_point;
				s4_min2=s4;
				i42=i;
			}
		}
		i_point++;
		i++;
	}

	//Vertex 1 and 2 are identical
	if ((v1p==v2p)&&(v1p!=NULL))
	{
		if(s1_min<s2_min)
		{
			v2p=v2p2;	//second closest vertex
			i2=i22;
		}
		else
		{
			v1p=v1p2;	//second closest vertex
			i1=i12;
		}
	}

	//Vertex 2 and 3 are identical
	if ((v2p==v3p)&&(v2p!=NULL))
	{
		if(s2_min<s3_min)
		{
			v3p=v3p2;	//second closest vertex
			i3=i32;
		}
		else
		{
			v2p=v2p2;	//second closest vertex
			i2=i22;
		}
	}

	//Vertex 3 and 4 are identical
	if ((v3p==v4p)&&(v3p!=NULL))
	{
		if(s3_min<s4_min)
		{
			v4p=v4p2;	//second closest vertex
			i4=i42;
		}
		else
		{
			v3p=v3p2;	//second closest vertex
			i3=i32;
		}
	}

	//Vertex 4 and 1 are identical
	if ((v4p==v1p)&&(v4p!=NULL))
	{
		if(s4_min<s1_min)
		{
			v1p=v1p2;	//second closest vertex
			i1=i12;
		}
		else
		{
			v4p=v4p2;	//second closest vertex
			i4=i42;
		}
	}

	//Are founded vertices in right order?
	if (index==2)
	{
		int k1=i2-i1;
		int k2=i3-i2;
		int k3=i4-i3;
		int k4=i1-i4;

		//Identical vertices
		if (k1*k2*k3*k4==0)
		{
			return false;
		}

		//Wrong order of vertices
		if ((k1<0)&&(k2<0) ||(k1<0)&&(k3<0)||(k1<0)&&(k4<0)||(k2<0)&&(k3<0)||(k2<0)&&(k4<0)||(k3<0)&&(k4<0))
		{
			return false;
		}
	}

	int orientation_edge_actual;
	if (recursion>1)
	{
		orientation_edge_actual=(orientation%4-(recursion-1)%4);
		if (orientation_edge_actual<=0) orientation_edge_actual+=4;
	}
	else orientation_edge_actual=orientation;


	/*
	//Change orientation of corners of the edge
	if (posit==0||index==2) //Left rectangle
	{	
	if ((v1p!=NULL) &&(v2p!=NULL))
	{

	if ((orientation==1)&&(v1p->getX()>v2p->getX())||(orientation==2)&&(v2p->getY()>v1p->getY())||(orientation==3)&&(v2p->getX()>v1p->getX())||(orientation==4)&&(v1p->getY()>v2p->getY()))
	{
	v1p->setOrientation(orientation+3);
	v2p->setOrientation(orientation+2);
	}
	else
	{
	v1p->setOrientation(orientation+1);
	v2p->setOrientation(orientation+2);
	}
	}

	if (index==2) //Only MBR
	{
	if (v3p!=NULL) v3p->setOrientation(orientation+3);
	if (v4p!=NULL)v4p->setOrientation(orientation+4);
	}
	}

	//Change orientation of corners of the edge
	else if (posit==1) //Right rectangle
	{
	if ((orientation==1)&&(v4p->getX()>v3p->getX())||(orientation==2)&&(v3p->getY()>v4p->getY())||(orientation==3)&&(v3p->getX()>v4p->getX())||(orientation==4)&&(v4p->getY()>v3p->getY()))
	{
	v4p->setOrientation(orientation+3);
	v3p->setOrientation(orientation+4);
	}
	else
	{
	v4p->setOrientation(orientation+1);
	v3p->setOrientation(orientation+4);
	}

	}
	*/

	if (posit==0||index==2) //Left rectangle
	{	
		if ((v1p!=NULL) &&(v2p!=NULL))
		{
			//Change order
			if ((i1>i2)&&(index!=2))
			{
				v1p->setOrientation(orientation+2);
				v2p->setOrientation(orientation+1);
			}
			//Normal order
			else
			{
				v1p->setOrientation(orientation+1);
				v2p->setOrientation(orientation+2);
			}
		}

		if (index==2) //Only MBR
		{
			if (v3p!=NULL) v3p->setOrientation(orientation+3);
			if (v4p!=NULL)v4p->setOrientation(orientation+4);
		}
	}

	//Change orientation of corners of the edge
	else if (posit==1) //Right rectangle
	{
		//Change order
		if (i3<i4)
		{
			v4p->setOrientation(orientation+4);
			v3p->setOrientation(orientation+1);
		}
		//Normal order
		else
		{
			v4p->setOrientation(orientation+1);
			v3p->setOrientation(orientation+4);
		}
	}
	return result;	
}



int Edge::position(Point *p, Point *p2, Point *p3)
{
	//Check point position to edge (left, right)
	if (intersections.size()>0)
	{
		double u1x=p3->getX()-p2->getX();
		double u1y=p3->getY()-p2->getY();
		double ux=p->getX()-p2->getX();
		double uy=p->getY()-p2->getY();

		//Calculate position
		double position=u1x*uy-u1y*ux;

		//Left
		if (position>0) 
		{
			return 0; 
		}

		//Right
		else 
		{
			return 1; //Right
		}
	}

	//For empty structure returns -1
	else return -1;
}


void Edge::splitEdge(std::stack<Edge> &el, Edge &em, int index,/* int posit,*/ int orientation_parent_edge, int &orientation_last_edge, int recursion)
{
	//Split edge
	int orientation_actual_point=-2;		//Orientation of the actual point
	int orientation_common_point;			//Orientation of the common point of the edge (not a vertex, detect changes in numbering)
	bool second=false;				//Start point of the building is not a vertex, second iteration
	std::list <Point> ::iterator i_start;		//Start point of the edge
	Edge ee, *eact = NULL;				//Common and actual edge

	//Initialization
	i_start=point.end();
	i_point=point.begin();

	while (i_point!=i_start)
	{
		//Get point and orientation
		Point p=*i_point;
		orientation_actual_point=p.getOrientation();

		//Get start point, orientation
		if ((orientation_actual_point>0)&&(i_start==point.end()))
		{
			//Get start point
			i_start=i_point;

			//MBR or first edge
			if (index==-1||index==2)
			{
				if (index==2)	//First MBR edge
				{
					orientation_last_edge=i_start->getOrientation();
					orientation_common_point=0;
				}
				else	//First edge (not MBR)
				{
					orientation_common_point=orientation_parent_edge+1;
					orientation_last_edge=orientation_common_point;
				}

				//Set orientation and add point
				eact=&ee;
			}
			//Other edge
			else
			{
				orientation_common_point=orientation_parent_edge;
				eact=&em;
			}
		}

		//After founding of the first vertex test orientation change
		if (i_start!=point.end())
		{
			//Orientation changed (third condition includes MBR, from)
			if ((orientation_actual_point>orientation_common_point)&&((i_point!=i_start)||((i_point==i_start)&&(index!=-1)&&(index!=2))))
			{
				//Change point orientation
				p.setOrientation(orientation_last_edge);

				//Set recursion for actual point
				eact->setRecursion(recursion+1);

				//Add point to old edge
				eact->add(p);
				el.push(*eact);

				//file4 << ">> >>Nova hrana" << '\n';
				eact->printEdge();

				//If start point of building != vertex
				if (!second)
				{
					//Create new edge
					ee.clear();						//Clear actual edge
					eact=&ee;						//Assign edge
					p.setOrientation(orientation_actual_point);	//Set orientation for point
					eact->add(p);					//Add edge to list

					//Remember orientation
					orientation_last_edge=orientation_actual_point;
				}
			}

			//Orientation of the edge did not change
			else
			{
				//Add point to edge
				p.setOrientation(orientation_last_edge);
				eact->add(p);
			}
		}

		//Remember last point of the edge (edge is not last...)
		if ((p==point.back())&&(index!=2)&&(index!=1))
		{
			//Change orientation to last vertex
			em=*eact;
		}

		//Increment point
		i_point++;

		//Tests, if this point is end point
		if (i_point==point.end())
		{
			second=true;
			i_point=point.begin();
			i_start++;

			//Not MBR, do not go around
			if (index!=2)
			{
				break;
			}
		}
	}
}


void Edge::createEdge(Edge &e_new, Point &start, Point &end, int orientation_edge_actual, int index, int posit)
{
	//Create new edge with points between intersections (between pointers)
	int one_vertex=-1;
	Point p_temp(0,0);
	Point *stop=end.getP();	//End point of the edge (point of the intersection)

	//Add inside points to edge
	while (!(&*(i_point)==stop))
	{
		//Write first stored point during the second step of cycle (later writing)
		if (one_vertex==0)
		{
			e_new.add(p_temp);
		}

		//Remember the first point (and write during next step)
		if (*start.getP()==*i_point)
		{
			p_temp=*i_point;
		}

		//Write common point
		else
		{
			e_new.add(*i_point);
		}

		//Increment point
		i_point++;
		one_vertex++;
	}

	//Add last point of the last edge
	if ((*i_point==point.back())&&(index==1)&&(one_vertex>=0))
	{
		//Last edge has only 2 points
		if (one_vertex==0) 
		{
			e_new.add(p_temp);  
		}

		//Last edge has more 2 points
		e_new.add(*i_point);			//Write point
	}

	//First edge has only 1 point
	if ((one_vertex==0)&& (index==-1))
	{
		//Create edge from 2 points
		if (orientation_edge_actual==1||orientation_edge_actual==3)
		{
			double y_new=(p_temp.getY()+yt)/2;
			Point p1(p_temp.getX(),y_new);
			e_new.add(p1);
			Point p2(end.getX(),y_new);
			e_new.add(p2);

			//e_new.add(p_temp);					//Write stored first point
			//Point p(end.getX(),p_temp.getY());	//Create new point
			//e_new.add(p);						//Write point
		}
		//Create edge from 2 points
		else
		{
			double x_new=(p_temp.getX()+xt)/2;
			Point p1(x_new,p_temp.getY());
			e_new.add(p1);
			Point p2(x_new,end.getY());
			e_new.add(p2);

			//e_new.add(p_temp);					//Write stored first point
			//Point p(p_temp.getX(),end.getY());	//Create new point
			//e_new.add(p);						//Write point
		}
	}

	//Last edge has only 1 point
	else if ((one_vertex==-1)&&(index==1))
	{
		//Create edge from 2 points
		if (orientation_edge_actual==1||orientation_edge_actual==3)
		{
			double y_new=(i_point->getY()+yt)/2;
			Point p1(start.getX(),y_new);
			e_new.add(p1);
			Point p2(i_point->getX(),y_new);
			e_new.add(p2);

			//Point p(start.getX(),i_point->getY());	//Create point
			//e_new.add(p);							//Add new point
			//e_new.add(*i_point);					//Add common point
		}
		//Create edge from 2 points
		else
		{
			double x_new=(i_point->getX()+xt)/2;
			Point p1(x_new, start.getY());
			e_new.add(p1);
			Point p2(x_new,i_point->getY());
			e_new.add(p2);

			//Point p(i_point->getX(),start.getY());	//Create point
			//e_new.add(p);							//Add new point
			//e_new.add(*i_point);					//Add common point
		}
	}

	//Common edge has only one point
	else if ((one_vertex==0)&& (index==0))
	{
		//Create edge from 2 points of mbr
		if (orientation_edge_actual==1||orientation_edge_actual==3)
		{
			double y_new=(p_temp.getY()+yt)/2;
			Point p1(start.getX(),y_new);
			e_new.add(p1);
			Point p2(end.getX(),y_new);
			e_new.add(p2);

			//Point p1(start.getX(),p_temp.getY());	//Create first point
			//e_new.add(p1);							//Add first point
			//Point p2(end.getX(),p_temp.getY());		//Create seconf point
			//e_new.add(p2);							//Add second point
		}
		//Create edge from 2 points of mbr
		else
		{
			double x_new=(p_temp.getX()+xt)/2;
			Point p1(x_new,start.getY());
			e_new.add(p1);
			Point p2(x_new,end.getY());
			e_new.add(p2);

			//Point p1(p_temp.getX(),start.getY());	//Create first point
			//e_new.add(p1);							//Add first point
			//Point p2(p_temp.getX(),end.getY());	//Create second point
			//e_new.add(p2);							//Add second point
		}
	}
}



void Edge::regressionLine(Point &p1, Point &p2, int orientation_edge)
{
	//Calculate regression line
	double x1_l,y1_l,x2_l,y2_l;
	Point pstart=point.front();
	Point pend=point.back();

	//Recalculate orientation to actual edge
	if (recursion>1)
	{
		orientation_edge=(orientation_edge%4-(recursion-1)%4);
		if (orientation_edge<=0) orientation_edge+=4;
	}

	//Start point of regression line
	if (orientation_edge==1||orientation_edge==3) 
	{
		x1_l=pstart.getX();
		y1_l=yt;
		x2_l=pend.getX();
		y2_l=yt;
	}

	//End point of regression line
	else
	{
		x1_l=xt;
		y1_l=pstart.getY();
		x2_l=xt;
		y2_l=pend.getY();
	}

	//Set regression line vertices
	p1.setX(x1_l);
	p1.setY(y1_l);
	p2.setX(x2_l);
	p2.setY(y2_l);
}

void Edge::intersectionsRegLine(Point &p1, Point &p2)
{
	//Calculate intersections regression line and all segments of edge
	Point *plast=NULL;
	i_point=point.begin();

	while(i_point!=point.end())
	{
		//Enter first point to intersections
		if (i_point==point.begin())
		{
			p1.setP(&*i_point);
			intersections.push_back(p1);
		}

		//Common point
		if (plast!=NULL) 
		{
			//Exist intersection?
			Point p_int(0,0);
			if (intersection(&*i_point,plast,&p1,&p2, p_int))
			{
				//Add intersection as next point
				p_int.setP(&*i_point);			//Pointer to point after intersection
				intersections.push_back(p_int);	//Add intersection
			}
		}

		//Assign and increment point
		plast=&*i_point;
		i_point++;
	}

	//Enter end point to intersections
	(p2).setP(&point.back());
	intersections.push_back(p2);
}


void Edge:: processEdgeIntersection(std::stack<Edge> &el, int orientation_edge)
{
	//Process edge and their intersections
	Edge eact;
	Point intersection_last(0,0);						//Last intersection
	int  orientation_last_edge=0;						//Orientation of the last edge <1,2,3,4>
	int position_point_to_edge=-1;						//Position point to edge (0=left,1=right)
	int j=0;								//Index of intersection
	int intersection_size=intersections.size();				//Number of intersection

	i_intersections=intersections.begin();

	//New
	intersection_last=*i_intersections;
	i_intersections++;
	j++;
	//End new

	i_point=point.begin();

	while (i_intersections!=intersections.end())
	{
		Edge e_new;

		//Check position (actual point and border intersections)
		position_point_to_edge=position(intersection_last.getP(),&intersections.front(),&intersections.back());

		//Orientation to actual edge
		int orientation_edge_actual=orientation_edge;

		//Recalculate orientation to actual edge
		if (recursion>1)
		{
			orientation_edge_actual=(orientation_edge%4-(recursion-1)%4);
			if (orientation_edge_actual<=0) orientation_edge_actual+=4;
		}
		else orientation_edge_actual=orientation_edge;

		//Create new edge and add new vertices if necessary
		if (j==1)
		{
			//First edge
			createEdge(e_new, intersection_last,*i_intersections,orientation_edge_actual,-1,position_point_to_edge);
		}
		else if (j==intersection_size-1)
		{
			//Last edge
			createEdge(e_new, intersection_last,*i_intersections,orientation_edge_actual,1,position_point_to_edge);
		}
		else
		{
			//Common edge
			createEdge(e_new, intersection_last,*i_intersections,orientation_edge_actual,0,position_point_to_edge);
		}

		//file4 << ">>Delena hrana" << '\n';
		e_new.printEdge();

		//Find min-max box
		Point v1(0,0), v2(0,0), v3(0,0), v4(0,0);
		e_new.mbr(v1,v2,v3,v4/*, orientation_edge_actual*/);

		//Assign mbr vertices
		Point v1p(0,0), v2p(0,0), v3p(0,0), v4p(0,0);

		//Find vertices and split edge (first segment j=-1)
		if (j==1) 
		{
			if (orientation_edge_actual==1) e_new.mbrNearestVertices(v1,v2,v3,v4,-1, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==2) e_new.mbrNearestVertices(v2,v3,v4,v1,-1, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==3) e_new.mbrNearestVertices(v3,v4,v1,v2,-1, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==4) e_new.mbrNearestVertices(v4,v1,v2,v3,-1, position_point_to_edge,orientation_edge);

			//file4 << ">>Delena hrana, ohodnoceni" << '\n';
			e_new.printEdge();

			e_new.splitEdge(el, eact, -1/*, position_point_to_edge*/, orientation_edge,orientation_last_edge, this->recursion);
		}

		//Find vertices and split edge (last segment)
		else if (j==intersection_size-1)
		{
			if (orientation_edge_actual==1) e_new.mbrNearestVertices(v1,v2,v3,v4,1, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==2) e_new.mbrNearestVertices(v2,v3,v4,v1,1, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==3) e_new.mbrNearestVertices(v3,v4,v1,v2,1, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==4) e_new.mbrNearestVertices(v4,v1,v2,v3,1, position_point_to_edge,orientation_edge);

			//file4 << ">>Delena hrana, ohodnoceni" << '\n';
			e_new.printEdge();

			e_new.splitEdge(el, eact, 1,/*position_point_to_edge,*/ orientation_edge,orientation_last_edge, this->recursion);
			eact.clear();
		}

		//Find vertices and split edge (common segment j=-1)
		else 
		{
			if (orientation_edge_actual==1) e_new.mbrNearestVertices(v1,v2,v3,v4,0, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==2) e_new.mbrNearestVertices(v2,v3,v4,v1,0, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==3) e_new.mbrNearestVertices(v3,v4,v1,v2,0, position_point_to_edge,orientation_edge);
			else if (orientation_edge_actual==4) e_new.mbrNearestVertices(v4,v1,v2,v3,0, position_point_to_edge,orientation_edge);

			//file4 << ">>Delena hrana, ohodnoceni" << '\n';
			e_new.printEdge();

			e_new.splitEdge(el, eact, 0,/*position_point_to_edge,*/orientation_edge,orientation_last_edge,this->recursion);
		}

		//Incrementation
		j++;									//Increment index
		intersection_last=*i_intersections;		//Store last intersection
		i_intersections++;						//Increment intersection
	}
}


void Edge:: processEdgeNoIntersection(std::stack<Edge>  &el)
{
	//Process edge without intersections
	int orientation_edge=0;						//Orientation of the edge
	int  orientation_last_edge=0;				//Orientation of the last edge <1,2,3,4>
	Point v1(0,0), v2(0,0), v3(0,0), v4(0,0);	//Vertices of MBR
	Edge eact;

	//Create mbr
	mbr(v1,v2,v3,v4/*,1*/);

	//Assign mbr vertices
	Point v1p(0,0), v2p(0,0), v3p(0,0), v4p(0,0);
	if (mbrNearestVertices(v1,v2,v3,v4,2, -1,0))
	{
		//Split vertices to 4 edges (index 2)
		splitEdge(el, eact, 2,/*0,*/orientation_edge,orientation_last_edge,this->recursion);
	}
	else
	{
		//Create mbr (rectangle aproximation)
		Edge e1, e2, e3, e4;
		v1.setOrientation(1);
		v2.setOrientation(1);
		e1.add(v1);
		e1.add(v2);
		v2.setOrientation(2);
		v3.setOrientation(2);
		e2.add(v2);
		e2.add(v3);
		v3.setOrientation(3);
		v4.setOrientation(3);
		e3.add(v3);
		e3.add(v4);
		v4.setOrientation(4);
		v1.setOrientation(4);
		e4.add(v4);
		e4.add(v1);
		el.push(e1);
		el.push(e2);
		el.push(e3);
		el.push(e4);
	}
}

void Edge::rotate(double angle)
{
	//Rotate edge by angle
	i_point=point.begin();
	while (i_point!=point.end())
	{
		i_point->rotate(angle);
		i_point++;
	}
}

void Edge:: printEdge()
{
	//Print edge
	//file4 <<"Hrana:" << '\n';
	//file4 <<"xt=" <<xt <<" yt=" <<yt <<" rec="  <<recursion <<'\n';
	i_point=point.begin();
	while (i_point!=point.end())
	{
		i_point->print(recursion);
		//double xx=i_point->getX();
		//double yy=i_point->getY();
		i_point++;
	}
	//file4 <<'\n';
}

